#!/usr/bin/env python

import re
from gradelib import *

r = Runner(save("xv6.out"))


@test(16, "uthread")
def test_uthread():
    r.run_qemu(shell_script(
        ['uthread'],
        terminate_match="^uthread: (no runnable threads|FAILED)$|PANIC: "))
    expected = ['thread_a started', 'thread_b started', 'thread_c started']
    expected.extend(['thread_%s %d' % (tid, n) for n in range(100) for tid in ('c', 'a', 'b')])
    expected.extend(['thread_c: exit after 100', 'thread_a: exit after 100', 'thread_b: exit after 100'])
    expected.append('uthread: no runnable threads')
    if not re.findall('\n'.join(expected), r.qemu.output, re.M):
        raise AssertionError('Output does not match expected output')


@test(0, "running alarmtest")
def test_alarmtest():
    r.run_qemu(shell_script(
        ['alarmtest'],
        terminate_match="^test2: (OK|FAILED)$|PANIC: "))

@test(8, "alarmtest: test0", parent=test_alarmtest)
def test_alarmtest_test0():
    r.match('^test0: OK$')

@test(8, "alarmtest: test1", parent=test_alarmtest)
def test_alarmtest_test1():
    r.match('^\\.?test1: OK$')

@test(8, "alarmtest: test2", parent=test_alarmtest)
def test_alarmtest_test2():
    r.match('^\\.?test2: OK$')


@test(0, "running kalloctest")
def test_kalloctest():
    r.run_qemu(shell_script(
        ['kalloctest'],
        terminate_match="^test1 OK$|PANIC: "), timeout=90)

@test(10, "kalloctest: test0", parent=test_kalloctest)
def test_kalloctest_test0():
    r.match('^test0 OK$')

@test(10, "kalloctest: test1", parent=test_kalloctest)
def test_kalloctest_test1():
    r.match('^test1 OK$')


@test(0, "running bcachetest")
def test_bcachetest():
    r.run_qemu(shell_script(
        ['bcachetest'],
        terminate_match="^test1 OK$|PANIC: "), timeout=90)

@test(10, "bcachetest: test0", parent=test_bcachetest)
def test_bcachetest_test0():
    r.match('^test0: OK$')

@test(10, "bcachetest: test1", parent=test_bcachetest)
def test_bcachetest_test1():
    r.match('^test1 OK$')


@test(20, "usertests")
def test_usertests():
    r.run_qemu(shell_script(['usertests'],
                            terminate_match=ALL_TESTS_RE),
               timeout=150)
    r.match('^ALL TESTS PASSED$')

run_tests()
