#!/usr/bin/env python

import re
from gradelib import *

r = Runner(save("xv6.out"))

PTE_PRINT = """page table 0x0000000087fe6000
 ..0: pte 0x000000002009a801 pa 0x000000008026a000
 .. ..0: pte 0x000000002009ac01 pa 0x000000008026b000
 .. .. ..0: pte 0x0000000021ffa41f pa 0x0000000087fe9000
 .. .. ..1: pte 0x000000002009b00f pa 0x000000008026c000
 .. .. ..2: pte 0x000000002009b41f pa 0x000000008026d000
 ..255: pte 0x0000000021ff9c01 pa 0x0000000087fe7000
 .. ..511: pte 0x0000000021ffa001 pa 0x0000000087fe8000
 .. .. ..510: pte 0x0000000021ff7807 pa 0x0000000087fde000
 .. .. ..511: pte 0x000000002000200b pa 0x0000000080008000"""

@test(0, "running lazytests")
def test_lazytests():
    r.run_qemu(shell_script(
        ['lazytests'],
    terminate_match="^test out of memory: (OK|FAILED)$|panic: "))

@test(10, "lazy: pte printout", parent=test_lazytests)
def test_filetest():
    [r.match("^{}$".format(l)) for l in PTE_PRINT.splitlines()]

@test(20, "lazy: map", parent=test_lazytests)
def test_filetest():
    r.match("^test lazy unmap: OK$")

@test(20, "lazy: unmap", parent=test_lazytests)
def test_memtest():
    r.match("test lazy alloc: OK$")

@test(0, "usertests")
def test_usertests():
    r.run_qemu(shell_script(['usertests'],
                            terminate_match=ALL_TESTS_RE),
               timeout=150)
    r.match('^ALL TESTS PASSED$')

def usertest_check(testcase, nextcase, output):
    if not re.search(r'\ntest {}: [\s\S]*OK\ntest {}'.format(testcase, nextcase), output):
        raise AssertionError('Failed ' + testcase)

@test(4, "usertests: pgbug", parent=test_usertests)
def test_pgbug():
    usertest_check("pgbug", "sbrkbugs", r.qemu.output)

@test(4, "usertests: sbrkbugs", parent=test_usertests)
def test_sbrkbugs():
    usertest_check("sbrkbugs", "badarg", r.qemu.output)

@test(4, "usertests: argptest", parent=test_usertests)
def test_argptest():
    usertest_check("argptest", "createdelete", r.qemu.output)

@test(4, "usertests: sbrkmuch", parent=test_usertests)
def test_sbrkmuch():
    usertest_check("sbrkmuch", "kernmem", r.qemu.output)

@test(4, "usertests: sbrkfail", parent=test_usertests)
def test_sbrkfail():
    usertest_check("sbrkfail", "sbrkarg", r.qemu.output)

@test(5, "usertests: sbrkarg", parent=test_usertests)
def test_sbrkarg():
    usertest_check("sbrkarg", "validatetest", r.qemu.output)

@test(5, "usertests: stacktest", parent=test_usertests)
def test_stacktest():
    usertest_check("stacktest", "opentest", r.qemu.output)

@test(20, "usertests: all tests", parent=test_usertests)
def test_usertests_all():
    r.match('^ALL TESTS PASSED$')

run_tests()
